#!/bin/sh -eu

# Style enforcement, suitable for use in a pre-commit hook.
#
# Style choices:
#  * two-space indent in scripts, set per .editorconfig
#  * almost-POSIX shell; we demand 'local' be available.
#
# shellcheck source=tools/lib.sh disable=SC2034
. "$(dirname "$0")/lib.sh" "$0" "$@"

usage() {
  printf >&2 'Usage: %s [-v]\n -v   verbose\n' "$progname"
  exit "${1:-1}"
}

while getopts ":hv" arg; do
  case $arg in
  h) usage 0 2>&1 ;;
  v) VERBOSE=$((VERBOSE + 1)) ;;
  :) die "missing required option for -$OPTARG; see -h for help" ;;
  \?) die "unknown option -$OPTARG; see -h for help" ;;
  *) die "unhandled option -$OPTARG; CODE BUG" ;;
  esac
done
shift $((OPTIND - 1))
unset OPTIND

cd_to_repo_root

for F in tools/*; do
  verbose "checking $F"
  base="$(basename "$F")"

  case "$base" in
  *.md)
    verbose "Skipping shellcheck of markdown file '${base}'"
    continue
    ;;
  lib.sh)
    # All exclusions marked at the top of the script.
    shellcheck "$F" || bump_warn_count
    ;;
  *)
    # SC2039 because we use 'local'
    # SC2240 because we use "$@" passthru for sourcing lib.sh; if the sh
    #        doesn't support it, it's broken, POSIX or not.  This is at
    #        the same level of "basic usability" as 'local'.
    shellcheck -e SC2039,SC2240 -x "$F" || bump_warn_count
    ;;
  esac

  out="$(shfmt -ln posix -i 2 -l "$F")"
  if [ -n "$out" ]; then
    warn_multi "shfmt: $out" \
      "see: shfmt -ln posix -i 2 -d '$F'" \
      "fix: shfmt -ln posix -i 2 -w '$F'"
  fi

done

report_exit -0
